# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ $VERSION =~ -[a-zA-Z] ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Release version: $VERSION"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: Run tests
      run: |
        dotnet test tests/CrowdQR.Api.Tests/CrowdQR.Api.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        project: [
          { name: 'api', path: 'src/CrowdQR.Api/CrowdQR.Api.csproj', dockerfile: 'src/CrowdQR.Api/Dockerfile' },
          { name: 'web', path: 'src/CrowdQR.Web/CrowdQR.Web.csproj', dockerfile: 'src/CrowdQR.Web/Dockerfile' }
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Publish application
      run: |
        dotnet publish ${{ matrix.project.path }} \
          --configuration Release \
          --no-restore \
          --output ./publish/${{ matrix.project.name }} \
          /p:Version=${{ needs.validate.outputs.version }}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.project.name }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ${{ matrix.project.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create release artifact
      run: |
        cd ./publish/${{ matrix.project.name }}
        tar -czf ../../${{ matrix.project.name }}-${{ needs.validate.outputs.version }}.tar.gz .

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-release
        path: ${{ matrix.project.name }}-${{ needs.validate.outputs.version }}.tar.gz
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-publish]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-release"
        merge-multiple: true

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --grep="^feat" --grep="^fix" --grep="^perf" --grep="^docs" --grep="^style" --grep="^refactor" --grep="^test" --grep="^chore" --invert-grep --grep="^Merge" | head -20)
        else
          CHANGELOG="Initial release"
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: Release ${{ needs.validate.outputs.version }}
        body: |
          ## üöÄ Release ${{ needs.validate.outputs.version }}
          
          ### üìã Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### üì¶ Docker Images
          - `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.validate.outputs.version }}`
          - `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ needs.validate.outputs.version }}`
          
          ### üèÉ‚Äç‚ôÇÔ∏è Quick Start
          ```bash
          # Pull the latest images
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.validate.outputs.version }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ needs.validate.outputs.version }}
          
          # Run with docker-compose
          docker-compose up -d
          ```
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.last-tag }}...${{ needs.validate.outputs.version }}
        files: |
          api-${{ needs.validate.outputs.version }}.tar.gz
          web-${{ needs.validate.outputs.version }}.tar.gz
        prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}
        draft: false