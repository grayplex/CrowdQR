CREATE TYPE "UserRole" AS ENUM (
  'audience',
  'dj'
);

CREATE TYPE "RequestStatus" AS ENUM (
  'pending',
  'approved',
  'rejected'
);

CREATE TABLE "User" (
  "UserID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Username" varchar UNIQUE NOT NULL,
  "Role" UserRole DEFAULT 'audience',
  "CreatedAt" timestamp DEFAULT (now())
);

CREATE TABLE "Event" (
  "EventID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "DJUserID" int NOT NULL,
  "Name" varchar NOT NULL,
  "Slug" varchar UNIQUE NOT NULL,
  "CreatedAt" timestamp DEFAULT (now()),
  "IsActive" boolean DEFAULT true
);

CREATE TABLE "Request" (
  "RequestID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "UserID" int NOT NULL,
  "EventID" int NOT NULL,
  "SongName" varchar NOT NULL,
  "ArtistName" varchar,
  "Status" RequestStatus DEFAULT 'pending',
  "CreatedAt" timestamp DEFAULT (now())
);

CREATE TABLE "Vote" (
  "VoteID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "RequestID" int NOT NULL,
  "UserID" int NOT NULL,
  "CreatedAt" timestamp DEFAULT (now())
);

CREATE TABLE "Session" (
  "SessionID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "UserID" int NOT NULL,
  "EventID" int NOT NULL,
  "ClientIP" varchar,
  "LastSeen" timestamp DEFAULT (now()),
  "RequestCount" int DEFAULT 0
);

CREATE TABLE "TrackMetadata" (
  "TrackID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "RequestID" int UNIQUE NOT NULL,
  "SpotifyID" varchar,
  "YoutubeID" varchar,
  "Duration" int,
  "AlbumArtURL" varchar
);

CREATE INDEX ON "Event" ("DJUserID");

CREATE UNIQUE INDEX ON "Event" ("Slug");

CREATE INDEX ON "Request" ("EventID");

CREATE INDEX ON "Request" ("Status");

CREATE UNIQUE INDEX "one_vote_per_user" ON "Vote" ("UserID", "RequestID");

CREATE INDEX ON "Session" ("UserID");

CREATE UNIQUE INDEX "one_session_per_user_event" ON "Session" ("EventID", "UserID");

COMMENT ON TABLE "User" IS 'Stores all user accounts. DJs and audiences are separated by role.';

COMMENT ON TABLE "Event" IS 'Each event represents a DJ set or show. Slug is used for user-friendly URLs.';

COMMENT ON TABLE "Request" IS 'Audience-submitted song requests, linked to event + user.';

COMMENT ON TABLE "Vote" IS 'Tracks user upvotes on requests. One vote per user per request.';

COMMENT ON TABLE "Session" IS 'Tracks audience activity and rate limiting during an event.';

COMMENT ON TABLE "TrackMetadata" IS 'Optional enrichment data pulled from external APIs for UI/analytics.';

COMMENT ON COLUMN "TrackMetadata"."Duration" IS 'Length of song in seconds';

ALTER TABLE "Event" ADD FOREIGN KEY ("DJUserID") REFERENCES "User" ("UserID");

ALTER TABLE "Request" ADD FOREIGN KEY ("UserID") REFERENCES "User" ("UserID");

ALTER TABLE "Request" ADD FOREIGN KEY ("EventID") REFERENCES "Event" ("EventID");

ALTER TABLE "Vote" ADD FOREIGN KEY ("RequestID") REFERENCES "Request" ("RequestID");

ALTER TABLE "Vote" ADD FOREIGN KEY ("UserID") REFERENCES "User" ("UserID");

ALTER TABLE "Session" ADD FOREIGN KEY ("UserID") REFERENCES "User" ("UserID");

ALTER TABLE "Session" ADD FOREIGN KEY ("EventID") REFERENCES "Event" ("EventID");

ALTER TABLE "TrackMetadata" ADD FOREIGN KEY ("RequestID") REFERENCES "Request" ("RequestID");
