@page "{slug?}"
@model EventModel
@{
    ViewData["Title"] = string.IsNullOrEmpty(Model.EventName) ? "Event" : Model.EventName;
}

<div class="container mt-4">
    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    
    <!-- Success Message Display -->
    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }


    @if (string.IsNullOrEmpty(Model.Slug))
    {
        <!-- Have not joined event -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h1 class="h4 mb-0">CrowdQR</h1>
                    </div>
                    <div class="card-body">
                        <p class="lead mb-4">Enter an event code to join and start requesting songs!</p>
                        <form method="get">
                            <div class="form-group mb-3">
                                <label for="slug" class="form-label">Event Code</label>
                                <input type="text" class="form-control" id="slug" name="slug" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Join Event</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Event is joined -->
        <div class="row">
            <div class="col-md-12 mb-4">
                <h1 class="h3 mb-0">@Model.EventName</h1>
                <p class="text-muted">
                    Event Code: @Model.Slug
                    <span id="connection-status" class="badge bg-secondary ms-2">
                        <i class="bi bi-broadcast-pin"></i> Connecting
                    </span>
                </p>
                @if (Model.IsAuthenticated)
                {
                    <p class="text-muted">Logged in as: @Model.UserName</p>
                }
            </div>
        </div>

        <div class="row">
            <!-- Request Form -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h2 class="h5 mb-0">Request a Song</h2>
                    </div>
                    <div class="card-body">
                        @Html.AntiForgeryToken()
                        <form id="request-form" method="post" asp-page-handler="">
                            <div class="form-group mb-3">
                                <label asp-for="NewSongRequest.SongName" class="form-label"></label>
                                <input asp-for="NewSongRequest.SongName" class="form-control" required>
                                <span asp-validation-for="NewSongRequest.SongName" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="NewSongRequest.ArtistName" class="form-label"></label>
                                <input asp-for="NewSongRequest.ArtistName" class="form-control">
                                <span asp-validation-for="NewSongRequest.ArtistName" class="text-danger"></span>
                            </div>
                            <input type="hidden" name="slug" value="@Model.Slug" />
                            <button type="submit" class="btn btn-primary w-100">Submit Request</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Song Requests List -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h2 class="h5 mb-0">Current Requests</h2>
                        <span class="badge bg-light text-dark" id="request-count">@Model.Requests.Count total</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" id="request-list">
                            @if (Model.Requests.Any())
                            {
                                @foreach (var request in Model.Requests.OrderByDescending(r => r.VoteCount).ThenBy(r => r.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved ? 0 : 1))
                                {
                                    <div class="list-group-item @(request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved ? "bg-light" : request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Rejected ? "bg-light text-muted" : "")"
                                         data-request-id="@request.RequestId">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h5 class="mb-1">@request.SongName</h5>
                                                <p class="mb-1 text-muted">@request.ArtistName</p>
                                                <small class="text-muted">Requested by @request.Requester</small>
                                                @if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved)
                                                {
                                                    <span class="badge bg-success ms-2" data-status="approved">Approved</span>
                                                }
                                                else if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Rejected)
                                                {
                                                    <span class="badge bg-secondary ms-2" data-status="rejected">Rejected</span>
                                                }
                                            </div>
                                            <div class="d-flex flex-column align-items-center">
                                                @if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Pending && Model.IsAuthenticated)
                                                {
                                                    @if (request.UserHasVoted)
                                                    {
                                                        <form method="post" asp-page-handler="RemoveVote" class="vote-form">
                                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                                            <input type="hidden" name="slug" value="@Model.Slug" />
                                                            <button type="submit" class="btn btn-sm btn-success mb-1" data-vote-action="remove">
                                                                <i class="bi bi-hand-thumbs-up-fill"></i>
                                                            </button>
                                                        </form>
                                                    }
                                                    else
                                                    {
                                                        <form method="post" asp-page-handler="Vote" class="vote-form">
                                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                                            <input type="hidden" name="slug" value="@Model.Slug" />
                                                            <button type="submit" class="btn btn-sm btn-outline-primary mb-1" data-vote-action="add">
                                                                <i class="bi bi-hand-thumbs-up"></i>
                                                            </button>
                                                        </form>
                                                    }
                                                }
                                                <span class="badge bg-secondary" data-vote-count>@request.VoteCount @(request.VoteCount == 1 ? "vote" : "votes")</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="list-group-item" id="empty-requests-message">
                                    <p class="text-center my-3">No requests yet. Be the first to request a song!</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 text-center">
            <p class="text-muted">
                <small>
                    <i class="bi bi-info-circle"></i>
                    Requests with the most votes get prioritized by the DJ.
                    Your request will appear in the list once submitted.
                </small>
            </p>
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Initialize SignalR for real-time updates
        (function() {
            // Only initialize on event pages with a slug
            const slug = '@Model.Slug';
            const eventId = '@Model.EventId';
            const userId = '@Model.UserId';

            if (!slug || !eventId) return;

            console.log('Initializing SignalR for event:', slug, 'ID:', eventId);

            // Initialize when document is ready
            $(document).ready(function() {
                // Initialize the SignalR connection and join event
                if (CrowdQR.SignalR.init(CrowdQR.Config.apiBaseUrl)) {
                    CrowdQR.SignalR.start().then(connected => {
                        if (connected) {
                            CrowdQR.SignalR.joinEvent(eventId);
                            updateConnectionStatus("connected");
                        } else {
                            updateConnectionStatus("disconnected");
                        }
                    });

                    // Register event handlers
                    setupEventHandlers();
                }

                // Setup form submission behavior
                setupFormHandlers();
            });

            // Set up form handlers
            function setupFormHandlers() {
                // Prevent double-submits for request form
                $('#request-form').on('submit', function() {
                    const submitButton = $(this).find('button[type="submit"]');
                    submitButton.prop('disabled', true);
                });

                // Prevent double-submits for vote forms
                $('.vote-form').on('submit', function(e) {
                    const submitButton = $(this).find('button[type="submit"]');
                    submitButton.prop('disabled', true);
                });
            }

            // Register event handlers for SignalR
            function setupEventHandlers() {
                // Handle connection status changes
                CrowdQR.SignalR.on('connectionStatus', data => {
                    updateConnectionStatus(data.status);
                });

                // Handle new request added
                CrowdQR.SignalR.on('requestAdded', data => {
                    if (data.eventId == eventId) {
                        console.log('New request received:', data);
                        fetchRequestAndAddToUI(data.requestId);
                    }
                });

                // Handle request status updates
                CrowdQR.SignalR.on('requestStatusUpdated', data => {
                    if (data.eventId == eventId) {
                        console.log('Request status updated:', data);
                        updateRequestStatus(data.requestId, data.status);
                    }
                });

                // Handle vote changes
                CrowdQR.SignalR.on('voteAdded', data => {
                    if (data.eventId == eventId) {
                        console.log('Vote added:', data);
                        updateVoteCount(data.requestId, data.voteCount, data.userId == userId);
                    }
                });

                CrowdQR.SignalR.on('voteRemoved', data => {
                    if (data.eventId == eventId) {
                        console.log('Vote removed:', data);
                        updateVoteCount(data.requestId, data.voteCount, false);
                    }
                });
            }

            // Update vote count on the UI
            function updateVoteCount(requestId, voteCount, isUserVote) {
                const requestElement = $(`.list-group-item[data-request-id="${requestId}"]`);
                if (!requestElement.length) return;

                // Update vote count display
                const voteCountElement = requestElement.find('[data-vote-count]');
                if (voteCountElement.length) {
                    voteCountElement.text(`${voteCount} ${voteCount === 1 ? 'vote' : 'votes'}`);
                    voteCountElement.addClass('highlight-change');
                    setTimeout(() => voteCountElement.removeClass('highlight-change'), 1500);
                }

                // Update the vote button if this is the current user's vote
                const voteForm = requestElement.find('.vote-form');
                if (voteForm.length) {
                    const voteButton = voteForm.find('button');

                    // Re-enable the button (it may have been disabled by a form submit)
                    voteButton.prop('disabled', false);

                    // Update button state based on user vote status
                    if (isUserVote) {
                        // Show filled button when user has voted
                        voteButton.removeClass('btn-outline-primary').addClass('btn-success');
                        voteButton.html('<i class="bi bi-hand-thumbs-up-fill"></i>');
                        voteForm.attr('action', voteForm.attr('action').replace('Vote', 'RemoveVote'));
                        voteButton.data('vote-action', 'remove');
                    } else {
                        // Show outline button when user hasn't voted
                        voteButton.removeClass('btn-success').addClass('btn-outline-primary');
                        voteButton.html('<i class="bi bi-hand-thumbs-up"></i>');
                        voteForm.attr('action', voteForm.attr('action').replace('RemoveVote', 'Vote'));
                        voteButton.data('vote-action', 'add');
                    }
                }

                // Reorder the requests based on vote count
                reorderRequests();
            }

            // Update request status on the UI
            function updateRequestStatus(requestId, status) {
                const requestElement = $(`.list-group-item[data-request-id="${requestId}"]`);
                if (!requestElement.length) return;

                // Get or create status badge
                let statusBadge = requestElement.find('[data-status]');
                if (!statusBadge.length) {
                    statusBadge = $('<span class="badge ms-2" data-status></span>');
                    requestElement.find('small.text-muted').after(statusBadge);
                }

                // Reset styles
                requestElement.removeClass('bg-light text-muted');
                statusBadge.removeClass('bg-success bg-secondary');

                // Apply new status styles
                if (status === 'Approved') {
                    statusBadge.addClass('bg-success').text('Approved').attr('data-status', 'approved');
                    requestElement.addClass('bg-light');
                    
                    // Hide vote button for approved requests
                    requestElement.find('.vote-form').fadeOut();
                } else if (status === 'Rejected') {
                    statusBadge.addClass('bg-secondary').text('Rejected').attr('data-status', 'rejected');
                    requestElement.addClass('bg-light text-muted');
                    
                    // Hide vote button for rejected requests
                    requestElement.find('.vote-form').fadeOut();
                }

                // Highlight the change
                requestElement.addClass('highlight-change');
                setTimeout(() => requestElement.removeClass('highlight-change'), 1500);

                // Reorder the list
                reorderRequests();
            }

            // Reorder requests based on vote count and status
            function reorderRequests() {
                const requestList = $('#request-list');
                const requests = requestList.find('.list-group-item').get();

                if (requests.length <= 1) return; // Nothing to sort

                // Sort requests by:
                // 1. Status (Pending first)
                // 2. Vote count (highest first)
                requests.sort((a, b) => {
                    const aStatus = $(a).find('[data-status]').attr('data-status');
                    const bStatus = $(b).find('[data-status]').attr('data-status');

                    // Status priority: pending > approved > rejected
                    if (aStatus && !bStatus) return 1;  // a is approved/rejected, b is pending
                    if (!aStatus && bStatus) return -1; // a is pending, b is approved/rejected
                    if (aStatus === 'approved' && bStatus === 'rejected') return -1;
                    if (aStatus === 'rejected' && bStatus === 'approved') return 1;

                    // If same status, sort by votes
                    const aVotes = parseInt($(a).find('[data-vote-count]').text()) || 0;
                    const bVotes = parseInt($(b).find('[data-vote-count]').text()) || 0;
                    return bVotes - aVotes; // Higher votes first
                });

                // Update DOM order
                $.each(requests, function(i, request) {
                    requestList.append(request);
                });
            }

            // Update connection status indicator
            function updateConnectionStatus(status) {
                const statusIndicator = $('#connection-status');
                if (!statusIndicator.length) return;

                statusIndicator.removeClass('bg-success bg-warning bg-secondary bg-danger');

                switch (status) {
                    case 'connected':
                        statusIndicator.addClass('bg-success').html('<i class="bi bi-broadcast"></i> Live');
                        break;
                    case 'reconnecting':
                        statusIndicator.addClass('bg-warning').html('<i class="bi bi-broadcast"></i> Reconnecting...');
                        break;
                    case 'disconnected':
                    case 'error':
                        statusIndicator.addClass('bg-danger').html('<i class="bi bi-broadcast-pin"></i> Offline');
                        // Show refresh button
                        /*
                        if (!$('#refresh-connection').length) {
                            statusIndicator.after(
                                '<button id="refresh-connection" class="btn btn-sm btn-outline-danger ms-2" onclick="window.location.reload()">' +
                                '<i class="bi bi-arrow-clockwise"></i> Refresh</button>'
                            );
                        }
                        */
                        break;
                    default:
                        statusIndicator.addClass('bg-secondary').html('<i class="bi bi-broadcast-pin"></i> Connecting');
                }
            }

            // Fetch a request from the API and add it to the UI
            function fetchRequestAndAddToUI(requestId) {
                fetch(`${CrowdQR.Config.apiBaseUrl}/api/request/${requestId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to fetch request: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(request => {
                        // Remove empty message if present
                        $('#empty-requests-message').remove();

                        // Create and add the new request element
                        const requestHtml = createRequestElement(request);
                        $('#request-list').prepend(requestHtml);

                        // Setup the vote form handler for the new the new request
                        setupFormHandlers();

                        // Update request count
                        const count = $('#request-list .list-group-item').length;
                        $('#request-count').text(`${count} total`);

                        // Highlight the new element
                        const newElement = $(`.list-group-item[data-request-id="${requestId}"]`);
                        newElement.addClass('highlight-change');
                        setTimeout(() => newElement.removeClass('highlight-change'), 1500);

                        // Reorder the list
                        reorderRequests();
                    })
                    .catch(error => {
                        console.error('Error fetching request:', error);
                    });
            }

            // Create HTML for a request element
            function createRequestElement(request) {
                // Determine request status
                const status = typeof request.status === 'number'
                    ? request.status
                    : request.status === 'Approved' ? 1 : request.status === 'Rejected' ? 2 : 0;

                const isPending = status === 0;
                const isApproved = status === 1;
                const isRejected = status === 2;

                // Determine CSS classes and badges
                const statusClass = isApproved ? 'bg-light' : (isRejected ? 'bg-light text-muted' : '');
                const statusBadge = isApproved
                    ? '<span class="badge bg-success ms-2" data-status="approved">Approved</span>'
                    : (isRejected ? '<span class="badge bg-secondary ms-2" data-status="rejected">Rejected</span>' : '');

                // Determine if current user has voted
                const userHasVoted = request.userHasVoted;

                // Only show vote button for pending requests
                const voteButtonHtml = isPending ? `
                    <form method="post" asp-page-handler="${userHasVoted ? 'RemoveVote' : 'Vote'}" class="vote-form">
                        <input type="hidden" name="requestId" value="${request.requestId}" />
                        <input type="hidden" name="slug" value="${slug}" />
                        <button type="submit" class="btn btn-sm ${userHasVoted ? 'btn-success' : 'btn-outline-primary'} mb-1" data-vote-action="${userHasVoted ? 'remove' : 'add'}">
                            <i class="bi bi-hand-thumbs-up${userHasVoted ? '-fill' : ''}"></i>
                        </button>
                    </form>
                ` : '';

                // Vote count (use the count directly or calculate from votes array)
                const voteCount = request.voteCount !== undefined
                    ? request.voteCount
                    : (request.votes ? request.votes.length : 0);

                // Create the HTML
                return `
                    <div class="list-group-item ${statusClass}" data-request-id="${request.requestId}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-1">${request.songName}</h5>
                                <p class="mb-1 text-muted">${request.artistName || ''}</p>
                                <small class="text-muted">Requested by ${request.requester || 'Anonymous'}</small>
                                ${statusBadge}
                            </div>
                            <div class="d-flex flex-column align-items-center">
                                ${voteButtonHtml}
                                <span class="badge bg-secondary" data-vote-count>${voteCount} ${voteCount === 1 ? 'vote' : 'votes'}</span>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Clean up when leaving the page
            window.addEventListener('beforeunload', function() {
                if (CrowdQR.SignalR.isConnected()) {
                    CrowdQR.SignalR.leaveEvent();
                }
            });
        })();
    </script>
}