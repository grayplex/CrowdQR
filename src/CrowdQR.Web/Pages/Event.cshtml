@page "{slug?}"
@model EventModel
@{
    ViewData["Title"] = string.IsNullOrEmpty(Model.EventName) ? "Event" : Model.EventName;
}

<div class="container mt-4">
    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    
    <!-- Success Message Display -->
    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }


    @if (string.IsNullOrEmpty(Model.Slug))
    {
        <!-- Have not joined event -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h1 class="h4 mb-0">CrowdQR</h1>
                    </div>
                    <div class="card-body">
                        <p class="lead mb-4">Enter an event code to join and start requesting songs!</p>
                        <form method="get">
                            <div class="form-group mb-3">
                                <label for="slug" class="form-label">Event Code</label>
                                <input type="text" class="form-control" id="slug" name="slug" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Join Event</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Event is joined -->
        <div class="row">
            <div class="col-md-12 mb-4">
                <h1 class="h3 mb-0">@Model.EventName</h1>
                <p class="text-muted">
                    Event Code: @Model.Slug
                    <span id="connection-status" class="badge bg-secondary ms-2">
                        <i class="bi bi-broadcast-pin"></i> Connecting
                    </span>
                </p>
                @if (Model.IsAuthenticated)
                {
                    <p class="text-muted">Logged in as: @Model.UserName</p>
                }
            </div>
        </div>

        <div class="row">
            <!-- Request Form -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h2 class="h5 mb-0">Request a Song</h2>
                    </div>
                    <div class="card-body">
                        <form id="request-form" method="post" asp-page-handler="">
                            <div class="form-group mb-3">
                                <label asp-for="NewSongRequest.SongName" class="form-label"></label>
                                <input asp-for="NewSongRequest.SongName" class="form-control" required>
                                <span asp-validation-for="NewSongRequest.SongName" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="NewSongRequest.ArtistName" class="form-label"></label>
                                <input asp-for="NewSongRequest.ArtistName" class="form-control">
                                <span asp-validation-for="NewSongRequest.ArtistName" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-3">
                                <label asp-for="NewSongRequest.Notes" class="form-label"></label>
                                <textarea asp-for="NewSongRequest.Notes" class="form-control" rows="2"></textarea>
                                <span asp-validation-for="NewSongRequest.Notes" class="text-danger"></span>
                                <div class="form-text">Any additional information for the DJ</div>
                            </div>
                            <input type="hidden" name="slug" value="@Model.Slug" />
                            <button type="submit" class="btn btn-primary w-100">Submit Request</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Song Requests List -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h2 class="h5 mb-0">Current Requests</h2>
                        <span class="badge bg-light text-dark" id="request-count">@Model.Requests.Count total</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" id="request-list">
                            @if (Model.Requests.Any())
                            {
                                @foreach (var request in Model.Requests.OrderByDescending(r => r.VoteCount).ThenBy(r => r.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved ? 0 : 1))
                                {
                                    <div class="list-group-item @(request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved ? "bg-light" : request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Rejected ? "bg-light text-muted" : "")"
                                         data-request-id="@request.RequestId">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h5 class="mb-1">@request.SongName</h5>
                                                <p class="mb-1 text-muted">@request.ArtistName</p>
                                                <small class="text-muted">Requested by @request.Requester</small>
                                                @if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Approved)
                                                {
                                                    <span class="badge bg-success ms-2" data-status="approved">Approved</span>
                                                }
                                                else if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Rejected)
                                                {
                                                    <span class="badge bg-secondary ms-2" data-status="rejected">Rejected</span>
                                                }
                                            </div>
                                            <div class="d-flex flex-column align-items-center">
                                                @if (request.Status == CrowdQR.Shared.Models.Enums.RequestStatus.Pending && Model.IsAuthenticated)
                                                {
                                                    @if (request.UserHasVoted)
                                                    {
                                                        <form method="post" asp-page-handler="RemoveVote" class="vote-form">
                                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                                            <input type="hidden" name="slug" value="@Model.Slug" />
                                                            <button type="submit" class="btn btn-sm btn-success mb-1" data-vote-action="remove">
                                                                <i class="bi bi-hand-thumbs-up-fill"></i>
                                                            </button>
                                                        </form>
                                                    }
                                                    else
                                                    {
                                                        <form method="post" asp-page-handler="Vote" class="vote-form">
                                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                                            <input type="hidden" name="slug" value="@Model.Slug" />
                                                            <button type="submit" class="btn btn-sm btn-outline-primary mb-1" data-vote-action="add">
                                                                <i class="bi bi-hand-thumbs-up"></i>
                                                            </button>
                                                        </form>
                                                    }
                                                }
                                                <span class="badge bg-secondary" data-vote-count>@request.VoteCount @(request.VoteCount == 1 ? "vote" : "votes")</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="list-group-item" id="empty-requests-message">
                                    <p class="text-center my-3">No requests yet. Be the first to request a song!</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 text-center">
            <p class="text-muted">
                <small>
                    <i class="bi bi-info-circle"></i>
                    Requests with the most votes get prioritized by the DJ.
                    Your request will appear in the list once submitted.
                </small>
            </p>
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Initialize SignalR for real-time updates
        (function() {
            // Only initialize on event pages with a slug
            const slug = '@Model.Slug';
            const eventId = '@Model.EventId';

            if (!slug || !eventId) {
                return;
            }

            console.log('Initializing SignalR for event:', slug, 'ID:', eventId);

            // Initialize connection when document is ready
            $(document).ready(function() {
                // Initialize the SignalR connection
                if (CrowdQR.SignalR.init(CrowdQR.Config.apiBaseUrl)) {
                    // Start the connection
                    CrowdQR.SignalR.start().then(connected => {
                        if (connected) {
                            // Join the event group
                            CrowdQR.SignalR.joinEvent(eventId);
                        }
                    });

                    // Register event handlers
                    registerEventHandlers();

                    // Set up AJAX form submission for votes and song requests
                    setupForms();
                }
            });

            // Set up AJAX form submission for votes and song requests
            function setupForms() {
                // Set up the vote forms to use AJAX instead of traditional form submission
                $('.vote-form').on('submit', function(e) {
                    e.preventDefault();

                    const form = $(this);
                    const formAction = form.attr('action');
                    const requestId = form.find('input[name="requestId"]').val();
                    const isRemove = form.find('button').attr('data-vote-action') === 'remove';

                    // Show loading state
                    const button = form.find('button');
                    const originalHtml = button.html();
                    button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');

                    // Send the AJAX request
                    $.ajax({
                        url: formAction || window.location.pathname,
                        type: 'POST',
                        data: form.serialize(),
                        success: function() {
                            console.log('Vote action successful');
                            // The button state will be updated by SignalR events
                        },
                        error: function(xhr, status, error) {
                            console.error('Error with vote action:', error);
                            // Restore the button state
                            button.prop('disabled', false).html(originalHtml);
                            alert('Failed to register your vote. Please try again.');
                        }
                    });
                });

                // Set up the request form to use AJAX
                $('#request-form').on('submit', function(e) {
                    // Only proceed if form is valid
                    if (this.checkValidity()) {
                        e.preventDefault();

                        const form = $(this);
                        const submitButton = form.find('button[type="submit"]');
                        const originalText = submitButton.text();

                        // Show loading state
                        submitButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...');

                        // Send the AJAX request
                        $.ajax({
                            url: window.location.pathname,
                            type: 'POST',
                            data: form.serialize(),
                            success: function() {
                                // Clear form fields
                                form.find('input[type="text"], textarea').val('');

                                // Restore button state
                                submitButton.prop('disabled', false).text(originalText);

                                // Show success message
                                alert('Your request has been submitted successfully!');

                                // Refresh page to show the new request
                                window.location.reload();
                            },
                            error: function(xhr, status, error) {
                                console.error('Error submitting request:', error);

                                // Restore button state
                                submitButton.prop('disabled', false).text(originalText);

                                // Show error message
                                alert('Failed to submit your request. Please try again.');
                            }
                        });
                    }
                });
            }

            function registerEventHandlers() {
                // Update UI when a new request is added
                CrowdQR.SignalR.on('requestAdded', data => {
                    if (data.eventId == eventId) {
                        // We'll refresh the page to show the new request
                        // In a more advanced implementation, we would dynamically add the request
                        setTimeout(() => location.reload(), 1000);
                    }
                });

                // Update UI when a request status is updated
                CrowdQR.SignalR.on('requestStatusUpdated', data => {
                    if (data.eventId == eventId) {
                        // Find the request element
                        const requestElement = $(`.list-group-item[data-request-id="${data.requestId}"]`);
                        if (requestElement.length) {
                            // Update the status badge
                            let statusBadge = requestElement.find('.badge[data-status]');

                            // Add badge if it doesn't exist
                            if (!statusBadge.length) {
                                statusBadge = $('<span class="badge ms-2" data-status></span>');
                                requestElement.find('small.text-muted').after(statusBadge);
                            }

                            // Remove existing status classes
                            statusBadge.removeClass('bg-success bg-secondary');
                            requestElement.removeClass('bg-light text-muted');

                            // Update badge based on new status
                            if (data.status === 'Approved') {
                                statusBadge.addClass('bg-success').text('Approved').attr('data-status', 'approved');
                                requestElement.addClass('bg-light');

                                // Remove vote button for approved requests
                                requestElement.find('.vote-form').fadeOut();
                            } else if (data.status === 'Rejected') {
                                statusBadge.addClass('bg-secondary').text('Rejected').attr('data-status', 'rejected');
                                requestElement.addClass('bg-light text-muted');

                                // Remove vote button for rejected requests
                                requestElement.find('.vote-form').fadeOut();
                            }

                            // Highlight the row to indicate it's been updated
                            requestElement.addClass('highlight-change');
                            setTimeout(() => requestElement.removeClass('highlight-change'), 1500);
                        }
                    }
                });

                // Update UI when a vote is added
                CrowdQR.SignalR.on('voteAdded', data => {
                    if (data.eventId == eventId) {
                        // Find the request element and update vote count
                        const requestElement = $(`.list-group-item[data-request-id="${data.requestId}"]`);
                        if (requestElement.length) {
                            const voteElement = requestElement.find('.badge[data-vote-count]');
                            voteElement.text(`${data.voteCount} ${data.voteCount === 1 ? 'vote' : 'votes'}`);

                            // Highlight the vote count to show it's been updated
                            voteElement.addClass('highlight-change');
                            setTimeout(() => voteElement.removeClass('highlight-change'), 1500);

                            // Update the current user's vote button if appropriate
                            const voteForm = requestElement.find('.vote-form');
                            const voteButton = voteForm.find('button');

                            // Re-enable the button after the AJAX request completes
                            voteButton.prop('disabled', false);

                            // Reorder the list based on new vote counts
                            reorderRequests();
                        }
                    }
                });

                // Update UI when a vote is removed
                CrowdQR.SignalR.on('voteRemoved', data => {
                    if (data.eventId == eventId) {
                        // Almost identical to voteAdded handler
                        const requestElement = $(`.list-group-item[data-request-id="${data.requestId}"]`);
                        if (requestElement.length) {
                            const voteElement = requestElement.find('.badge[data-vote-count]');
                            voteElement.text(`${data.voteCount} ${data.voteCount === 1 ? 'vote' : 'votes'}`);

                            // Highlight the vote count to show it's been updated
                            voteElement.addClass('highlight-change');
                            setTimeout(() => voteElement.removeClass('highlight-change'), 1500);

                            // Re-enable vote button if needed
                            const voteForm = requestElement.find('.vote-form');
                            const voteButton = voteForm.find('button');
                            voteButton.prop('disabled', false);

                            // Reorder the list based on new vote counts
                            reorderRequests();
                        }
                    }
                });

                // Track connection status
                CrowdQR.SignalR.on('connectionStatus', data => {
                    const statusIndicator = $('#connection-status');
                    if (statusIndicator.length) {
                        statusIndicator.removeClass('bg-success bg-warning bg-secondary bg-danger');

                        if (data.status === 'connected') {
                            statusIndicator.addClass('bg-success').html('<i class="bi bi-broadcast"></i> Live');
                        } else if (data.status === 'reconnecting') {
                            statusIndicator.addClass('bg-warning').html('<i class="bi bi-broadcast"></i> Reconnecting...');
                        } else {
                            statusIndicator.addClass('bg-danger').html('<i class="bi bi-broadcast-pin"></i> Offline');
                        }
                    }
                });
            }

            // Reorder requests based on vote count
            function reorderRequests() {
                const requestList = $('#request-list');
                const requests = requestList.find('.list-group-item').get();

                if (requests.length <= 1) return; // Nothing to sort

                // Custom sort function - by votes (desc) and then status (pending first)
                requests.sort((a, b) => {
                    const aVoteText = $(a).find('[data-vote-count]').text();
                    const bVoteText = $(b).find('[data-vote-count]').text();

                    // Extract vote count numbers
                    const aVotes = parseInt(aVoteText.split(' ')[0]) || 0;
                    const bVotes = parseInt(bVoteText.split(' ')[0]) || 0;

                    // First sort by votes
                    if (aVotes !== bVotes) {
                        return bVotes - aVotes; // Higher votes first
                    }

                    // Then by status (Pending > Approved > Rejected)
                    const aStatus = $(a).find('[data-status]').attr('data-status') || 'pending';
                    const bStatus = $(b).find('[data-status]').attr('data-status') || 'pending';

                    if (aStatus === bStatus) return 0;

                    if (aStatus === 'pending') return -1;  // a comes first
                    if (bStatus === 'pending') return 1;   // b comes first
                    if (aStatus === 'approved') return -1; // a comes first
                    if (bStatus === 'approved') return 1;  // b comes first

                    return 0;
                });

                // Update the DOM
                $.each(requests, function(idx, request) {
                    requestList.append(request);
                });
            }

            // Listen for beforeunload to properly leave the event
            window.addEventListener('beforeunload', function() {
                if (CrowdQR.SignalR.isConnected() && CrowdQR.SignalR.getCurrentEventId()) {
                    CrowdQR.SignalR.leaveEvent();
                }
            });
        })();
    </script>

    <script>
        // Connection monitor for event page
        (function() {
            // Initialize variables
            let connectionFailures = 0;
            let maxConnectionAttempts = 5;

            // Set up connection monitoring
            $(document).ready(function() {
                // Listen for connection status changes
                CrowdQR.SignalR.on('connectionStatus', handleConnectionStatusChange);

                // Set up periodic health checks
                setInterval(checkConnectionHealth, 30000); // Every 30 seconds
            });

            // Handle connection status changes
            function handleConnectionStatusChange(data) {
                const statusIndicator = $('#connection-status');
                if (!statusIndicator.length) return;

                statusIndicator.removeClass('bg-success bg-warning bg-secondary bg-danger');

                switch (data.status) {
                    case 'connected':
                        statusIndicator.addClass('bg-success').html('<i class="bi bi-broadcast"></i> Live');
                        // Reset failure counter on successful connection
                        connectionFailures = 0;
                        // Hide any error messages
                        hideConnectionError();
                        break;

                    case 'reconnecting':
                        statusIndicator.addClass('bg-warning').html('<i class="bi bi-broadcast"></i> Reconnecting...');
                        break;

                    case 'error':
                    case 'disconnected':
                        statusIndicator.addClass('bg-danger').html('<i class="bi bi-broadcast-pin"></i> Offline');
                        connectionFailures++;

                        // After several failures, show persistent error message
                        if (connectionFailures >= maxConnectionAttempts) {
                            showConnectionError('Unable to establish a connection to the server. Real-time updates are not available.');
                        }
                        break;

                    case 'timeout':
                        statusIndicator.addClass('bg-danger').html('<i class="bi bi-broadcast-pin"></i> Timeout');
                        connectionFailures++;

                        if (connectionFailures >= maxConnectionAttempts) {
                            showConnectionError('Connection timed out. Real-time updates are not available.');
                        }
                        break;

                    default:
                        statusIndicator.addClass('bg-secondary').html('<i class="bi bi-broadcast-pin"></i> Connecting');
                        break;
                }
            }

            // Periodically check connection health
            async function checkConnectionHealth() {
                if (!CrowdQR.SignalR.isConnected()) return;

                try {
                    const isHealthy = await CrowdQR.SignalR.checkHealth();
                    if (!isHealthy) {
                        console.warn('Connection health check failed');
                        // Try to reconnect
                        await CrowdQR.SignalR.reconnect();
                    }
                } catch (error) {
                    console.error('Error checking connection health:', error);
                }
            }

            // Show a connection error message below the status indicator
            function showConnectionError(message) {
                // Create error message if it doesn't exist
                if (!$('#connection-error').length) {
                    const errorHtml = `
                        <div id="connection-error" class="alert alert-danger mt-2 mb-0 py-2 small">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    <span id="error-message-text">${message}</span>
                                </div>
                                <button class="btn btn-sm btn-outline-danger" onclick="window.location.reload()">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                </button>
                            </div>
                        </div>
                    `;

                    // Insert after the status indicator
                    $('#connection-status').after(errorHtml);
                } else {
                    // Update existing message
                    $('#error-message-text').text(message);
                    $('#connection-error').removeClass('d-none');
                }
            }

            // Hide the connection error message
            function hideConnectionError() {
                const errorElement = $('#connection-error');
                if (errorElement.length) {
                    errorElement.addClass('d-none');
                }
            }
        })();
    </script>
}