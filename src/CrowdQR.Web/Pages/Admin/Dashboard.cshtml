@page "{eventId?}"
@using CrowdQR.Shared.Models.Enums
@model CrowdQR.Web.Pages.Admin.DashboardModel
@{
    ViewData["Title"] = "DJ Dashboard";
    Layout = "_AdminLayout";
}

<div class="container-fluid mt-4">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Event Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6">
                DJ Dashboard: @Model.EventName
                <span class="badge bg-primary ms-2">@Model.EventSlug</span>
            </h1>
        </div>
        <div class="col-md-4 text-end">
            <div class="btn-group" role="group">
                <a href="/qr/@Model.EventSlug" class="btn btn-outline-primary" target="_blank">
                    <i class="bi bi-qr-code"></i> QR Code
                </a>
                <a href="/event/@Model.EventSlug" class="btn btn-outline-secondary" target="_blank">
                    <i class="bi bi-eye"></i> View Event
                </a>
            </div>
        </div>
    </div>

    <!-- Stats and Search Row -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="row row-cols-1 row-cols-md-3 g-4">
                <div class="col">
                    <div class="card text-white bg-primary">
                        <div class="card-body">
                            <h5 class="card-title"><i class="bi bi-music-note"></i> Pending Requests</h5>
                            <p class="card-text display-6">@Model.PendingRequests.Count</p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card text-white bg-success">
                        <div class="card-body">
                            <h5 class="card-title"><i class="bi bi-check2-circle"></i> Approved</h5>
                            <p class="card-text display-6">@Model.ApprovedRequests.Count</p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card text-white bg-info">
                        <div class="card-body">
                            <h5 class="card-title"><i class="bi bi-people"></i> Active Users</h5>
                            <p class="card-text display-6">@Model.ActiveUsers</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Search Requests</h5>
                    <form method="get" class="d-flex">
                        <input type="hidden" name="eventId" value="@Model.EventId" />
                        <input type="hidden" name="tab" value="@Model.Tab" />
                        <input type="text" name="searchTerm" class="form-control me-2" placeholder="Song, artist, or requester..." value="@Model.SearchTerm">
                        <button class="btn btn-primary" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-4">
        <li class="nav-item">
            <a class="nav-link @(Model.Tab == "pending" ? "active" : "")"
               href="?eventId=@Model.EventId&tab=pending&searchTerm=@Model.SearchTerm">
                Pending
                <span class="badge bg-primary ms-1">@Model.PendingRequests.Count</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(Model.Tab == "approved" ? "active" : "")"
               href="?eventId=@Model.EventId&tab=approved&searchTerm=@Model.SearchTerm">
                Approved
                <span class="badge bg-success ms-1">@Model.ApprovedRequests.Count</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(Model.Tab == "rejected" ? "active" : "")"
               href="?eventId=@Model.EventId&tab=rejected&searchTerm=@Model.SearchTerm">
                Rejected
                <span class="badge bg-secondary ms-1">@Model.RejectedRequests.Count</span>
            </a>
        </li>
    </ul>

    <!-- Request Tables -->
    @if (Model.Tab == "pending")
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="h5 mb-0">Pending Requests</h3>
            </div>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Song</th>
                            <th>Artist</th>
                            <th>Requester</th>
                            <th>Votes</th>
                            <th>Time</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.PendingRequests.Any())
                        {
                            @foreach (var request in Model.PendingRequests.OrderByDescending(r => r.VoteCount))
                            {
                                <tr data-request-id="@request.RequestId">
                                    <td class="fw-bold">@request.SongName</td>
                                    <td>@request.ArtistName</td>
                                    <td>@request.Requester</td>
                                    <td>
                                        <span class="badge bg-primary" data-vote-count="@request.RequestId">
                                            <i class="bi bi-hand-thumbs-up"></i> @request.VoteCount
                                        </span>
                                    </td>
                                    <td>@request.CreatedAt.ToString("HH:mm")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <form method="post" asp-page-handler="Approve" class="d-inline">
                                                <input type="hidden" name="requestId" value="@request.RequestId" />
                                                <input type="hidden" name="eventId" value="@Model.EventId" />
                                                <button type="submit" class="btn btn-sm btn-success">
                                                    <i class="bi bi-check"></i> Approve
                                                </button>
                                            </form>
                                            <form method="post" asp-page-handler="Reject" class="d-inline ms-1">
                                                <input type="hidden" name="requestId" value="@request.RequestId" />
                                                <input type="hidden" name="eventId" value="@Model.EventId" />
                                                <button type="submit" class="btn btn-sm btn-secondary">
                                                    <i class="bi bi-x"></i> Reject
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-4">No pending requests</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (Model.Tab == "approved")
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="h5 mb-0">Approved Requests</h3>
            </div>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Song</th>
                            <th>Artist</th>
                            <th>Requester</th>
                            <th>Votes</th>
                            <th>Requested</th>
                            <th>Approved</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.ApprovedRequests.Any())
                        {
                            @foreach (var request in Model.ApprovedRequests.OrderByDescending(r => r.UpdatedAt))
                            {
                                <tr class="table-success table-opacity-25" data-request-id="@request.RequestId">
                                    <td class="fw-bold">@request.SongName</td>
                                    <td>@request.ArtistName</td>
                                    <td>@request.Requester</td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            <i class="bi bi-hand-thumbs-up"></i> @request.VoteCount
                                        </span>
                                    </td>
                                    <td>@request.CreatedAt.ToString("HH:mm")</td>
                                    <td>@(request.UpdatedAt?.ToString("HH:mm") ?? "-")</td>
                                    <td>
                                        <form method="post" asp-page-handler="MoveToPending">
                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                            <input type="hidden" name="eventId" value="@Model.EventId" />
                                            <button type="submit" class="btn btn-sm btn-outline-secondary">
                                                <i class="bi bi-arrow-counterclockwise"></i> Move to Pending
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">No approved requests</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (Model.Tab == "rejected")
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="h5 mb-0">Rejected Requests</h3>
            </div>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Song</th>
                            <th>Artist</th>
                            <th>Requester</th>
                            <th>Votes</th>
                            <th>Requested</th>
                            <th>Rejected</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.RejectedRequests.Any())
                        {
                            @foreach (var request in Model.RejectedRequests.OrderByDescending(r => r.UpdatedAt))
                            {
                                <tr class="table-secondary" data-request-id="@request.RequestId">
                                    <td class="fw-bold">@request.SongName</td>
                                    <td>@request.ArtistName</td>
                                    <td>@request.Requester</td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            <i class="bi bi-hand-thumbs-up"></i> @request.VoteCount
                                        </span>
                                    </td>
                                    <td>@request.CreatedAt.ToString("HH:mm")</td>
                                    <td>@(request.UpdatedAt?.ToString("HH:mm") ?? "-")</td>
                                    <td>
                                        <form method="post" asp-page-handler="MoveToPending">
                                            <input type="hidden" name="requestId" value="@request.RequestId" />
                                            <input type="hidden" name="eventId" value="@Model.EventId" />
                                            <button type="submit" class="btn btn-sm btn-outline-secondary">
                                                <i class="bi bi-arrow-counterclockwise"></i> Move to Pending
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">No rejected requests</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Real-time Update Indicator -->
    <div class="mt-4 text-end">
        <div class="d-flex align-items-center justify-content-end">
            <span class="badge bg-secondary me-2" data-connection-status>
                <i class="bi bi-broadcast-pin"></i> Connecting...
            </span>
            <span class="connection-stats small text-muted">
                Latency: <span class="connection-latency">--</span> |
                Updated: <span id="last-update-time">@DateTime.Now.ToString("HH:mm:ss")</span>
            </span>
        </div>
        <div class="connection-error-message mt-2 text-danger d-none">
            <small><i class="bi bi-exclamation-triangle-fill"></i> <span id="error-message"></span></small>
            <button id="refresh-page-btn" class="btn btn-sm btn-link text-danger p-0 ms-2" onclick="window.location.reload()">
                Refresh page
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize SignalR for real-time dashboard updates
        (function() {
            // Only initialize for dashboard with an eventId
            const eventId = '@Model.EventId';
            if (!eventId) return;

            console.log('Initializing SignalR for Dashboard event ID:', eventId);

            // Initialize when document is ready
            $(document).ready(function() {
                // Initialize the SignalR connection
                if (CrowdQR.SignalR.init(CrowdQR.Config.apiBaseUrl)) {
                    CrowdQR.SignalR.start().then(connected => {
                        if (connected) {
                            CrowdQR.SignalR.joinEvent(eventId);
                            updateConnectionStatus('connected');
                        } else {
                            updateConnectionStatus('disconnected');
                        }
                    });

                    // Register event handlers
                    setupEventHandlers();
                } else {
                    updateConnectionStatus('error');
                }

                // Setup form handlers
                setupFormHandlers();
            });

            // Update the connection status indicator
            function updateConnectionStatus(status) {
                const indicator = $('[data-connection-status]');
                if (!indicator.length) return;

                indicator.removeClass('bg-success bg-warning bg-danger bg-secondary');

                switch (status) {
                    case 'connected':
                        indicator.addClass('bg-success')
                            .html('<i class="bi bi-broadcast"></i> Live Updates Active');
                        break;
                    case 'reconnecting':
                        indicator.addClass('bg-warning')
                            .html('<i class="bi bi-broadcast"></i> Reconnecting...');
                        break;
                    case 'disconnected':
                    case 'error':
                    case 'failed':
                        indicator.addClass('bg-danger')
                            .html('<i class="bi bi-broadcast-pin"></i> Updates Offline');
                    default:
                        indicator.addClass('bg-secondary')
                            .html('<i class="bi bi-broadcast-pin"></i> Connecting...');
                }
                // Update last update time
                $('#last-update-time').text(new Date().toLocaleTimeString());
            }

            // Register all event handlers
            function setupEventHandlers() {
                // Handle connection status changes
                CrowdQR.SignalR.on('connectionStatus', data => {
                    updateConnectionStatus(data.status);
                });

                // Handle new request added
                CrowdQR.SignalR.on('requestAdded', data => {
                    if (data.eventId == eventId) {
                        console.log('New request received:', data);

                        // Update the pending count in the UI
                        updatePendingCount(1);

                        // If on pending tab, add the new request to the table
                        if ($('a.nav-link:contains("Pending")').hasClass('active')) {
                            // Fetch the new request details
                            fetchRequestDetails(data.requestId, (request) => {
                                // Add the new request to the table
                                addRequestToTable(request);
                                // Reorder the table
                                reorderPendingTable();
                            });
                        } else {
                            // Show notification if not on pending tab
                            showNotification('New Song Request',
                                'A new song request has been added to the pending queue.',
                                () => $('.nav-link:contains("Pending")').click());
                        }
                    }
                });

                // Handle request status updates
                CrowdQR.SignalR.on('requestStatusUpdated', data => {
                    if (data.eventId == eventId) {
                        console.log('Request status updated:', data);

                        // Update counters based on new status
                        updateCounterBadges(data.status);

                        // Get active tab
                        const isPendingTabActive = $('a.nav-link:contains("Pending")').hasClass('active');
                        const isApprovedTabActive = $('a.nav-link:contains("Approved")').hasClass('active');
                        const isRejectedTabActive = $('a.nav-link:contains("Rejected")').hasClass('active');

                        // Find the row for this request
                        const row = $(`tr[data-request-id="${data.requestId}"]`);
                        if (!row.length) return;

                        // Handle UI updates based on which tab is active and the new status
                        if (data.status === 'Approved') {
                            if (isPendingTabActive && row.length) {
                                // If we're on pending tab and this request was just approved, remove it
                                fadeOutAndRemove(row);
                            } else if (isApprovedTabActive && !row.length) {
                                // If we're on approved tab and this is a newly approved request, fetch and add it
                                fetchRequestDetails(data.requestId, (request) => {
                                    addApprovedRequestToTable(request);
                                });
                            }
                        } else if (data.status === 'Rejected') {
                            if (isPendingTabActive && row.length) {
                                // If we're on pending tab and this request was just rejected, remove it
                                fadeOutAndRemove(row);
                            } else if (isRejectedTabActive && !row.length) {
                                // If we're on rejected tab and this is a newly rejected request, fetch and add it
                                fetchRequestDetails(data.requestId, (request) => {
                                    addRejectedRequestToTable(request);
                                });
                            }
                        } else if (data.status === 'Pending') {
                            if ((isApprovedTabActive || isRejectedTabActive) && row.length) {
                                // If we're on approved/rejected tab and this request was moved to pending, remove it
                                fadeOutAndRemove(row);
                            } else if (isPendingTabActive && !row.length) {
                                // If we're on pending tab and this is a newly pending request, fetch and add it
                                fetchRequestDetails(data.requestId, (request) => {
                                    addRequestToTable(request);
                                    reorderPendingTable();
                                });
                            }
                        }

                        // Show a toast notification
                        showSuccessToast(`Request ${data.requestId} has been ${data.status.toLowerCase()}`);

                    }
                });

                // Handle vote changes
                CrowdQR.SignalR.on('voteAdded', data => {
                    if (data.eventId == eventId) {
                        console.log('Vote added:', data);
                        updateVoteCount(data.requestId, data.voteCount);
                    }
                });

                CrowdQR.SignalR.on('voteRemoved', data => {
                    if (data.eventId == eventId) {
                        console.log('Vote removed:', data);
                        updateVoteCount(data.requestId, data.voteCount);
                    }
                });

                // Handle user joined event
                CrowdQR.SignalR.on('userJoinedEvent', data => {
                    if (data.eventId == eventId) {
                        console.log('User joined event:', data);
                        incrementActiveUsers();
                    }
                });

                CrowdQR.SignalR.on('userLeftEvent', data => {
                    if (data.eventId == eventId) {
                        console.log('User left event:', data);
                        decrementActiveUsers();
                    }
                });
            }

            // Fetch request details
            function fetchRequestDetails(requestId, callback) {
                $.ajax({
                    url: `${CrowdQR.Config.apiBaseUrl}/api/request/${requestId}`,
                    type: 'GET',
                    success: function(data) {
                        if (typeof callback === 'function') {
                            callback(data);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error(`Error fetching request ${requestId}:`, error);
                        showErrorToast('Failed to fetch new request details');
                    }
                });
            }

            // Create a new table row for a request
            function addRequestToTable(request) {
                // Create a new row element
                const newRowHtml = `
                    <tr data-request-id="${request.requestId}" class="highlight-change">
                        <td class="fw-bold">${request.songName}</td>
                        <td>${request.artistName || ''}</td>
                        <td>${request.requester || 'Anonymous'}</td>
                        <td>
                            <span class="badge bg-primary" data-vote-count="${request.requestId}">
                                <i class="bi bi-hand-thumbs-up"></i> ${request.voteCount || 0}
                            </span>
                        </td>
                        <td>${new Date(request.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</td>
                        <td>
                            <div class="btn-group" role="group">
                                <form method="post" asp-page-handler="Approve" class="d-inline">
                                    <input type="hidden" name="requestId" value="${request.requestId}" />
                                    <input type="hidden" name="eventId" value="${eventId}" />
                                    <button type="submit" class="btn btn-sm btn-success">
                                        <i class="bi bi-check"></i> Approve
                                    </button>
                                </form>
                                <form method="post" asp-page-handler="Reject" class="d-inline ms-1">
                                    <input type="hidden" name="requestId" value="${request.requestId}" />
                                    <input type="hidden" name="eventId" value="${eventId}" />
                                    <button type="submit" class="btn btn-sm btn-secondary">
                                        <i class="bi bi-x"></i> Reject
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                `;

                // Check if there's a "no requests" message to remove
                const noRequestsRow = $('tbody tr td[colspan="6"]:contains("No pending requests")').closest('tr');
                if (noRequestsRow.length) {
                    noRequestsRow.remove();
                }

                // Add the new row to the table
                $('tbody').prepend(newRowHtml);

                // Set up form handlers for the new row
                setupFormHandlers();

                // Remove highlight after a delay
                setTimeout(() => {
                    $(`tr[data-request-id="${request.requestId}"]`).removeClass('highlight-change');
                }, 1500);
            }

            // Setup AJAX form handlers
            function setupFormHandlers() {
                // Handle approve/reject/move forms via AJAX
                $('form[asp-page-handler="Approve"], form[asp-page-handler="Reject"], form[asp-page-handler="MoveToPending"]')
                    .on('submit', function(e) {
                    e.preventDefault();
                    
                    const form = $(this);
                    const requestId = form.find('input[name="requestId"]').val();
                    const actionType = form.attr('asp-page-handler');
                    
                    // Determine new status based on action
                    let newStatus;
                    if (actionType === 'Approve') newStatus = 'Approved';
                    else if (actionType === 'Reject') newStatus = 'Rejected';
                    else if (actionType === 'MoveToPending') newStatus = 'Pending';
                    
                    // Show loading state
                    const button = form.find('button[type="submit"]');
                    const originalHtml = button.html();
                    button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                    
                    // Submit the form via AJAX
                    $.ajax({
                        url: form.attr('action') || window.location.pathname,
                        type: 'POST',
                        data: form.serialize(),
                        success: function() {
                            // No need to update UI here as SignalR will handle that
                            showSuccessToast(`Request ${newStatus.toLowerCase()} successfully!`);
                            
                            // Remove the row if we're on a non-matching tab
                            const currentTab = $('.nav-link.active').attr('href').split('=')[1];
                            if ((newStatus === 'Approved' && currentTab !== 'approved') ||
                                (newStatus === 'Rejected' && currentTab !== 'rejected') ||
                                (newStatus === 'Pending' && currentTab !== 'pending')) {
                                
                                const row = $(`tr[data-request-id="${requestId}"]`);
                                fadeOutAndRemove(row);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error(`Error updating request ${requestId} status:`, error);
                            
                            // Restore button state
                            button.prop('disabled', false).html(originalHtml);
                            
                            // Show error message
                            showErrorToast('Failed to update request status. Please try again.');
                        }
                    });
                });
            }

            // Update vote count for a specific request
            function updateVoteCount(requestId, voteCount) {
                const voteBadge = $(`tr[data-request-id="${requestId}"] .badge[data-vote-count]`);
                if (!voteBadge.length) return;

                // Update the text
                voteBadge.html(`<i class="bi bi-hand-thumbs-up"></i> ${voteCount}`);

                // Highlight the change
                voteBadge.addClass('highlight-change');
                setTimeout(() => voteBadge.removeClass('highlight-change'), 1500);

                // If on pending tab, reorder the table
                if ($('a.nav-link:contains("Pending")').hasClass('active')) {
                    reorderPendingTable();
                }
            }

            // Reorder the pending requests table by vote count
            function reorderPendingTable() {
                const table = $('table tbody');
                const rows = table.find('tr').get();

                // Only continue if theres rows to sort
                if (rows.length <= 1) return;

                // Sort rows by vote count
                rows.sort(function(a, b) {
                    const countA = parseInt($(a).find('.badge:contains("thumbs-up")').text().trim().split(' ')[1]) || 0;
                    const countB = parseInt($(b).find('.badge:contains("thumbs-up")').text().trim().split(' ')[1]) || 0;
                    return countB - countA; // Descending order
                });

                // Re-append rows in new order with animation
                $.each(rows, function(idx, row) {
                    const $row = $(row);
                    const originalIndex = $row.index();

                    if (originalIndex !== idx) {
                        $row.addClass('highlight-change');
                        setTimeout(() => $row.removeClass('highlight-change'), 1500);
                    }

                    table.append($row);
                });
            }

            // Fade out and remove a row
            function fadeOutAndRemove(element) {
                element.fadeOut(400, function() {
                    element.remove();
                });
            }

            // Increment active users count
            function incrementActiveUsers() {
                const activeUsersElement = $('.card:contains("Active Users") .display-6');
                const currentCount = parseInt(activeUsersElement.text()) || 0;
                activeUsersElement.text(currentCount + 1);

                // Highlight the change
                activeUsersElement.addClass('highlight-change');
                setTimeout(() => activeUsersElement.removeClass('highlight-change'), 1500);
            }

            function decrementActiveUsers() {
                const activeUsersElement = $('.card:contains("Active Users") .display-6');
                const currentCount = parseInt(activeUsersElement.text()) || 0;
                activeUsersElement.text(Math.max(0, currentCount - 1));

                // Highlight the change
                activeUsersElement.addClass('highlight-change');
                setTimeout(() => activeUsersElement.removeClass('highlight-change'), 1500);
            }

            // Update counter badges when request status changes
            function updateCounterBadges(newStatus) {
                // Get current counts
                const pendingBadge = $('.nav-link:contains("Pending") .badge');
                const approvedBadge = $('.nav-link:contains("Approved") .badge');
                const rejectedBadge = $('.nav-link:contains("Rejected") .badge');

                let pendingCount = parseInt(pendingBadge.text()) || 0;
                let approvedCount = parseInt(approvedBadge.text()) || 0;
                let rejectedCount = parseInt(rejectedBadge.text()) || 0;

                // Update based on the action
                if (newStatus === 'Approved') {
                    pendingCount = Math.max(0, pendingCount - 1);
                    approvedCount += 1;
                } else if (newStatus === 'Rejected') {
                    pendingCount = Math.max(0, pendingCount - 1);
                    rejectedCount += 1;
                } else if (newStatus === 'Pending') {
                    pendingCount += 1
                }

                // Update the badge texts
                pendingBadge.text(pendingCount);
                approvedBadge.text(approvedCount);
                rejectedBadge.text(rejectedCount);

                // Also update the card counts
                $('.card:contains("Pending Requests") .display-6').text(pendingCount);
                $('.card:contains("Approved") .display-6').text(approvedCount);
                $('.card:contains("Rejected Requests") .display-6').text(rejectedCount);
            }

            // Increment the pending count
            function updatePendingCount(increment) {
                // Update badge count
                const pendingBadge = $('.nav-link:contains("Pending") .badge');
                const currentCount = parseInt(pendingBadge.text()) || 0;
                pendingBadge.text(currentCount + increment);

                // Update card count
                const pendingCountDisplay = $('.card:contains("Pending Requests") .display-6');
                const cardCount = parseInt(pendingCountDisplay.text()) || 0;
                pendingCountDisplay.text(cardCount + increment);

                // Highlight the change
                pendingBadge.addClass('highlight-change');
                setTimeout(() => pendingBadge.removeClass('highlight-change'), 1500);
            }

            // Show toast notification for success
            function showSuccessToast(message) {
                // Create toast container if it doesn't exist
                if ($('#toast-container').length === 0) {
                    $('body').append('<div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11"></div>');
                }

                const toastId = 'toast-' + Date.now();
                const toastHtml = `
                    <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header bg-success text-white">
                            <i class="bi bi-check-circle me-2"></i>
                            <strong class="me-auto">Success</strong>
                            <small>just now</small>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;

                $('#toast-container').append(toastHtml);
                const toast = new bootstrap.Toast(document.getElementById(toastId));
                toast.show();

                // Remove toast after it's hidden
                $(`#${toastId}`).on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }

            // Show toast notification for errors
            function showErrorToast(message) {
                // Create toast container if it doesn't exist
                if ($('#toast-container').length === 0) {
                    $('body').append('<div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11"></div>');
                }

                const toastId = 'toast-' + Date.now();
                const toastHtml = `
                    <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header bg-danger text-white">
                            <i class="bi bi-exclamation-circle me-2"></i>
                            <strong class="me-auto">Error</strong>
                            <small>just now</small>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;

                $('#toast-container').append(toastHtml);
                const toast = new bootstrap.Toast(document.getElementById(toastId));
                toast.show();

                // Remove toast after it's hidden
                $(`#${toastId}`).on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }

            // Show browser notification for important updates
            function showNotification(title, body, clickCallback) {
                // Check if browser notifications are supported
                if (!('Notification' in window)) {
                    console.log('This browser does not support notifications');
                    return;
                }

                // Check if permission is already granted
                if (Notification.permission === 'granted') {
                    const notification = new Notification(title, {
                        body: body,
                        icon: '/favicon.ico'
                    });

                    // Auto-close after 5 seconds
                    setTimeout(() => notification.close(), 5000);

                    // Handle click
                    if (typeof clickCallback === 'function') {
                        notification.onclick = function() {
                            clickCallback();
                            this.close();
                        };
                    }
                }
                // Otherwise, request permission
                else if (Notification.permission !== 'denied') {
                    Notification.requestPermission().then(permission => {
                        if (permission === 'granted') {
                            showNotification(title, body, clickCallback);
                        }
                    });
                }

                // Always show toast as fallback
                showSuccessToast(body);

                // Try to play notification sound
                try {
                    const audio = new Audio('/sounds/notification.mp3');
                    audio.play().catch(e => console.log('Could not play notification sound', e));
                } catch (e) {
                    console.log('Audio notification not supported');
                }
            }

            // Clean up connection when leaving the page
            window.addEventListener('beforeunload', function() {
                if (CrowdQR.SignalR.isConnected()) {
                    CrowdQR.SignalR.leaveEvent();
                }
            });

            // Set up periodic connection health checks
            setInterval(function() {
                if (CrowdQR.SignalR.isConnected()) {
                    // Update the connection latency display
                    CrowdQR.SignalR.measureLatency().then(latency => {
                        if (latency) {
                            $('.connection-latency').text(`${latency.roundTripTime}ms`);
                        }
                    });

                    // Update the last check time
                    $('#last-update-time').text(new Date().toLocaleTimeString());
                }
            }, 30000); // Check every 30 seconds
        })();
    </script>
}