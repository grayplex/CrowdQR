services:
  traefik:
    image: traefik:v3.0
    container_name: crowdqr-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./deploy/traefik:/etc/traefik:ro
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --api.dashboard=false
      - --providers.file.directory=/etc/traefik
      - --providers.file.watch=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=crowdqr-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.forwardedheaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32 # Cloudflare IPs
      - --entrypoints.web.proxyprotocol.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32 # Cloudflare IPs
      - --entrypoints.websecure.forwardedheaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32 # Cloudflare IPs
      - --entrypoints.websecure.proxyprotocol.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32  
      - --certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=30
      - --log.level=INFO
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=false"

  web:
    build:
      context: ./src
      dockerfile: CrowdQR.Web/Dockerfile
    image: ${REGISTRY:-ghcr.io}/${REPOSITORY:-grayplex/crowdqr}-web:${CROWDQR_VERSION:-latest}
    container_name: crowdqr-web
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ApiSettings__BaseUrl=http://api:5000
      - ApiSettings__PublicUrl=https://api.${DOMAIN}
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=true"
      
      # HTTP Router (for redirect)
      - "traefik.http.routers.crowdqr-web-http.entrypoints=web"
      - "traefik.http.routers.crowdqr-web-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.crowdqr-web-http.middlewares=globalHeaders@file,redirect-to-https@file"
      - "traefik.http.routers.crowdqr-web-http.service=crowdqr-web-http"
      - "traefik.http.routers.crowdqr-web-http.priority=20"
      
      # HTTPS Router
      - "traefik.http.routers.crowdqr-web.entrypoints=websecure"
      - "traefik.http.routers.crowdqr-web.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.crowdqr-web.middlewares=globalHeaders@file,secureHeaders@file"
      - "traefik.http.routers.crowdqr-web.service=crowdqr-web"
      - "traefik.http.routers.crowdqr-web.priority=20"
      - "traefik.http.routers.crowdqr-web.tls.certresolver=cloudflare"
      - "traefik.http.routers.crowdqr-web.tls.options=securetls@file"
      
      # Services
      - "traefik.http.services.crowdqr-web-http.loadbalancer.server.port=80"
      - "traefik.http.services.crowdqr-web.loadbalancer.server.port=80"

  api:
    build:
      context: ./src
      dockerfile: CrowdQR.Api/Dockerfile
    image: ${REGISTRY:-ghcr.io}/${REPOSITORY:-grayplex/crowdqr}-api:${CROWDQR_VERSION:-latest}
    container_name: crowdqr-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER:-CrowdQR.Api}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-CrowdQR.Web}
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=true"
      
      # HTTP Router (for redirect)
      - "traefik.http.routers.crowdqr-api-http.entrypoints=web"
      - "traefik.http.routers.crowdqr-api-http.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.crowdqr-api-http.middlewares=globalHeaders@file,redirect-to-https@file"
      - "traefik.http.routers.crowdqr-api-http.service=crowdqr-api-http"
      - "traefik.http.routers.crowdqr-api-http.priority=20"
      
      # HTTPS Router
      - "traefik.http.routers.crowdqr-api.entrypoints=websecure"
      - "traefik.http.routers.crowdqr-api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.crowdqr-api.middlewares=globalHeaders@file,secureHeaders@file"
      - "traefik.http.routers.crowdqr-api.service=crowdqr-api"
      - "traefik.http.routers.crowdqr-api.priority=20"
      - "traefik.http.routers.crowdqr-api.tls.certresolver=cloudflare"
      - "traefik.http.routers.crowdqr-api.tls.options=securetls@file"
      
      # Services
      - "traefik.http.services.crowdqr-api-http.loadbalancer.server.port=5000"
      - "traefik.http.services.crowdqr-api.loadbalancer.server.port=5000"

  db:
    image: postgres:17
    container_name: crowdqr-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=false"

networks:
  crowdqr-network:
    name: crowdqr-network
    driver: bridge

volumes:
  db_data: