services:
  traefik:
    image: traefik:v3.0
    container_name: crowdqr-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Cloudflare API credentials
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./deploy/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./letsencrypt:/letsencrypt
    command:
      - --configFile=/etc/traefik/traefik.yml
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=false"

  web:
    build:
      context: ./src
      dockerfile: CrowdQR.Web/Dockerfile
    image: ${REGISTRY:-ghcr.io}/${REPOSITORY:-grayplex/crowdqr}-web:${CROWDQR_VERSION:-latest}
    container_name: crowdqr-web
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ApiSettings__BaseUrl=http://api:5000
      - ApiSettings__PublicUrl=https://api.${DOMAIN}
    depends_on:
      api:
        condition: service_healthy
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=cloudflare"
      - "traefik.http.routers.web.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.web.tls.domains[0].sans=www.${DOMAIN}"
      - "traefik.http.routers.web.middlewares=security-headers@file,cors-headers@file"
      - "traefik.http.services.web.loadbalancer.server.port=80"
      # Redirect www to non-www
      - "traefik.http.routers.web-www.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.web-www.entrypoints=websecure"
      - "traefik.http.routers.web-www.tls.certresolver=cloudflare"
      - "traefik.http.routers.web-www.middlewares=www-redirect@docker"
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www\\.(.+)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://$${1}"
      - "traefik.http.middlewares.www-redirect.redirectregex.permanent=true"
  
  api:
    build:
      context: ./src
      dockerfile: CrowdQR.Api/Dockerfile
    image: ${REGISTRY:-ghcr.io}/${REPOSITORY:-grayplex/crowdqr}-api:${CROWDQR_VERSION:-latest}
    container_name: crowdqr-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER:-CrowdQR.Api}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-CrowdQR.Web}
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=cloudflare"
      - "traefik.http.routers.api.middlewares=security-headers@file,cors-headers@file"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      # WebSocket support for SignalR
      - "traefik.http.routers.api-ws.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/hubs/`)"
      - "traefik.http.routers.api-ws.entrypoints=websecure"
      - "traefik.http.routers.api-ws.tls.certresolver=cloudflare"
      - "traefik.http.services.api-ws.loadbalancer.server.port=5000"

  db:
    image: postgres:17
    container_name: crowdqr-db
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - crowdqr-network
    labels:
      - "traefik.enable=false"

  
networks:
  crowdqr-network:
    driver: bridge

volumes:
  db_data: